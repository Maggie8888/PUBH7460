#A demonstration of functions from the GPPack
library(Rcpp)
library(RcppArmadillo)
library(RcppEigen)
library(FastGP)
library(ellipse)
library(eigeninv)
library(mvtnorm)
library(MASS)

rcpp_distance <- function(l, m, N) {
  .Call('FastGP_rcpp_distance', PACKAGE = 'FastGP', l, m, N)
}

durbin <- function(r, N) {
  .Call('FastGP_durbin', PACKAGE = 'FastGP', r, N)
}

trench <- function(r, y, N) {
  .Call('FastGP_trench', PACKAGE = 'FastGP', r, y, N)
}

rcppeigen_invert_matrix <- function(A) {
  .Call('FastGP_rcppeigen_invert_matrix', PACKAGE = 'FastGP', A)
}

rcppeigen_get_diag <- function(A) {
  .Call('FastGP_rcppeigen_get_diag', PACKAGE = 'FastGP', A)
}

rcppeigen_get_det <- function(A) {
  .Call('FastGP_rcppeigen_get_det', PACKAGE = 'FastGP', A)
}

rcppeigen_get_chol <- function(A) {
  .Call('FastGP_rcppeigen_get_chol', PACKAGE = 'FastGP', A)
}

rcppeigen_get_chol_stable <- function(A) {
  .Call('FastGP_rcppeigen_get_chol_stable', PACKAGE = 'FastGP', A)
}

rcppeigen_get_chol_diag <- function(A) {
  .Call('FastGP_rcppeigen_get_chol_diag', PACKAGE = 'FastGP', A)
}

N <- 200
sigma <- 1 #variance parameter in the covariance function
phi <- 1 #decay parameter for the exponential kernel
Sig <- as.matrix(sigma*exp(-as.matrix(dist(seq(1,N)))^2/phi)) #test covariance function

#Now elliptical slice sampling

#Relevant Parameters:
A <- 1 #amplitude of the sin function used for our signal
T <- 5 #period of the sin function used as our signal
sigma <- 10 #variance parameter in the covariance function
phi <- 100 #decay parameter for the exponential kernel
N <- 100 #number of time points 

#A function that creates a signal, which can be toggled for multiple shapes. In the present iteration we use a sin function with variable period.
signal <- function(t) {
        return(A*sin(t/T))
}

#Define our covariance matrix using the exponential kernel
S <- as.matrix(sigma*exp(-as.matrix(dist(seq(1,N)))^2/phi))
#Generate a copy of the signal on the time scale of 1...N
t <- mvrnorm(n = 1, mu = rep(0,100), Sigma = S , tol = 1e-6)
s <- signal(seq(1,N)+t)+rnorm(N,sd=sqrt(.001))

#log-lik function
loglike <- function(w,s){
        return (dmvnorm(s, mean = signal(seq(1:N)+w),sigma=.001*diag(1,N),log=T))
}

#rcpp based log-lik function
loglike_rcpp <- function(w,s){
        return (rcpp_log_dmvnorm(S = .001*diag(1,N),mu=signal(seq(1:N)+w),s,istoep=TRUE))
}
X <- matrix(seq(1,N),nrow=N)
Sig <- sigma*exp(-rcpp_distance(X,dim(X)[1],dim(X)[2])^2/phi)
mcmcSamples <- eliptical(loglike_rcpp,s,Sig,1000,250,100,TRUE)
par(mfrow=c(1,1))
plot(colMeans(mcmcSamples), type="l")
points(t, type="l", lwd=3, col="red")
points(colMeans(mcmcSamples) + 2* apply(mcmcSamples, 2, sd), type="l", lty="dashed")
points(colMeans(mcmcSamples) - 2* apply(mcmcSamples, 2, sd), type="l", lty="dashed")



